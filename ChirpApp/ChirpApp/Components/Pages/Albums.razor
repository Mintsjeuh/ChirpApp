@using ChirpApp.Models
@using ChirpApp.Services
@using System.Linq
@using Microsoft.AspNetCore.Components.Forms

@page "/albums"
@inject AlbumService albumService
@rendermode InteractiveServer

<h3>Albums</h3>

<!-- Search and Filtering Inputs -->
<!--
@foreach (var filteredAlbum in FilteredAlbumList)
{
<p>@filteredAlbum.AlbumName</p>
}
-->

<EditForm Model="albumFromForm" OnValidSubmit="SubmitForm" FormName="AddAlbum">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <div>
        <label>
            Artist: 
            <InputText @bind-Value="albumFromForm!.Artist" />
        </label>
    </div>
    <div>
        <label>
            Album name:
            <InputText @bind-Value="albumFromForm!.AlbumName" />
        </label>
    </div>
    <div>
        <label>
            Songs:
            <InputText @bind-Value="songInput" />
            @* <button class="btn btn-primary" @onclick="AddToSongList">Add song</button> *@
            <button class="btn btn-primary" @onclick="() => AddToSongList(songInput)">Add song</button>
        </label>
    </div>
    <div>
        <label>
            Release date: 
            <InputDate @bind-Value="albumFromForm!.ReleaseDate" />
        </label>
    </div>
    <div>
        <button type="submit">Submit</button>
    </div>
</EditForm>

<div>
    <label>
        Filter album list:
        <InputText @bind-Value="FilterText" @oninput="SetFilterValue"></InputText>
    </label>
</div>


@if (AlbumList == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Artist</th>
                <th>Album name</th>
                <th>Songs</th>
                <th>Release date</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var album in FilteredAlbumList)
            {
                <tr>
                    <td>@album.Artist</td>
                    <td>@album.AlbumName</td>
                    <td>
                        @foreach (var song in album.Songs) {
                            <table class="table">
                                <tr>@song</tr>
                            </table>
                        }
                    </td>
                    <td>@album.ReleaseDate.ToShortDateString()</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<Album> AlbumList = new List<Album>();
    private List<Album> FilteredAlbumList = new List<Album>();
    private string FilterText = "";
    private List<string> songsFromForm = new List<string>();
    private string songInput = "";

    protected override async Task OnInitializedAsync()
    {
        AlbumList = await albumService.GetAlbums();
        FilteredAlbumList = AlbumList;
    }

    private void SetFilterValue(ChangeEventArgs e) {
        if (e.Value != null)
        {
            FilterText = e.Value.ToString();
        }
        FilterAlbums();
    }

    private void FilterAlbums()
    {
        FilteredAlbumList = AlbumList
        .Where(a => (
            a.Artist.Contains(FilterText, StringComparison.OrdinalIgnoreCase) ||
            a.AlbumName.Contains(FilterText, StringComparison.OrdinalIgnoreCase) ||
            a.Songs.Any(song => (song.Contains(FilterText, StringComparison.OrdinalIgnoreCase)))
            ))
        .OrderByDescending(a => a.ReleaseDate)
        .ToList();

        if (FilteredAlbumList.Count != 0) { SplitInput(FilteredAlbumList); }
    }

    private void SplitInput(List<Album> albums) {
        List<Album> startFilteredAlbums = new List<Album>();

        foreach (var album in albums) {

            var artistParts = album.Artist.Split(' ', StringSplitOptions.RemoveEmptyEntries);
            var albumNameParts = album.AlbumName.Split(' ', StringSplitOptions.RemoveEmptyEntries);

            var parts = artistParts.Concat(albumNameParts).ToArray();

            foreach (var song in album.Songs) {
                var songParts = song.Split(' ', StringSplitOptions.RemoveEmptyEntries);
                parts = parts.Concat(songParts).ToArray();
            }

            for (int i = 0; i < parts.Length; i++) {
                if (parts[i].StartsWith(FilterText, StringComparison.OrdinalIgnoreCase)) {
                    startFilteredAlbums.Add(album);
                    break;
                }
            }
        }

        FilteredAlbumList = startFilteredAlbums
        .OrderByDescending(a => a.ReleaseDate)
        .ToList();
    }

    public void AddToSongList(string song)
    {
        if (!string.IsNullOrWhiteSpace(song))
        {
            songsFromForm.Add(song);
            songInput = "";
        }
    }


    //[SupplyParameterFromForm]
    private Album albumFromForm { get; set; } = new Album
        {
            Artist = "",
            AlbumName = "",
            ReleaseDate = DateTime.UtcNow,
            Songs = Array.Empty<string>()
        };


    private async Task SubmitForm()
    {
        if (albumFromForm != null)
        {
            albumFromForm.Songs = songsFromForm.ToArray();
            await albumService.AddAlbum(
                albumFromForm
            );
        }
        AlbumList = await albumService.GetAlbums();
        FilteredAlbumList = AlbumList;
    }
}
